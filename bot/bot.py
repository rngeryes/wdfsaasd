# bot.py
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import aiohttp
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8096336072:AAH4Cw1nkPM_N7zT_qhp_X8Y2J0-X8_U51E"
ADMIN_IDS = {2144460390, 7648312416}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
SERVER_URL = "http://localhost:3001"  # URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º aiogram 3.7.0
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
checked_withdraws = set()

async def fetch_withdraws():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–≤–æ–¥–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{SERVER_URL}/api/withdraws") as resp:
                if resp.status == 200:
                    return await resp.json()
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤: HTTP {resp.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return None

async def send_withdraw_notification(withdraw_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–≤–æ–¥–µ"""
    try:
        message = (
            "üéÅ *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{withdraw_data.get('telegram_username', 'N/A')}\n"
            f"üÜî User ID: `{withdraw_data.get('user_id', 'N/A')}`\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {withdraw_data.get('gift_name', 'N/A')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {withdraw_data.get('gift_price', 0)} –∑–≤–µ–∑–¥\n"
            f"üÜî Withdraw ID: `{withdraw_data.get('id', 'N/A')}`"
        )
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                    callback_data=f"approve_{withdraw_data.get('id', '')}"
                ),
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                    callback_data=f"reject_{withdraw_data.get('id', '')}"
                )
            ]
        ])
        
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            reply_markup=keyboard
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–≤–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {withdraw_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üõ† –ë–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/withdraws - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã"
    )
    await message.answer(help_text)

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
if message.from_user.id in ADMIN_IDS:
        status = (
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
            f"üîé –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã–≤–æ–¥–æ–≤: {len(checked_withdraws)}\n"
            f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {asyncio.get_event_loop().time()}"
        )
        await message.answer(status)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")

@dp.message(Command("withdraws"))
async def cmd_withdraws(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /withdraws (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    withdraws = await fetch_withdraws()
    if not withdraws:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–≤–æ–¥–∞—Ö")
        return
    
    last_withdraws = withdraws[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–≤–æ–¥–æ–≤
    
    response = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥:*\n\n"
    for withdraw in last_withdraws:
        response += (
            f"üÜî ID: `{withdraw.get('id', 'N/A')}`\n"
            f"üë§ @{withdraw.get('telegram_username', 'N/A')}\n"
f"üéÅ {withdraw.get('gift_name', 'N/A')} ({withdraw.get('gift_price', 0)} –∑–≤–µ–∑–¥)\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {withdraw.get('status', 'unknown').upper()}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
    
    await message.answer(response)

@dp.callback_query(lambda c: c.data.startswith(('approve_', 'reject_')))
async def handle_withdraw_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    try:
        action, withdraw_id = callback.data.split('_', 1)
        status = "completed" if action == "approve" else "rejected"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SERVER_URL}/api/update_withdraw_status",
                json={"withdraw_id": withdraw_id, "status": status}
            ) as resp:
                if resp.status == 200:
                    status_text = "–æ–¥–æ–±—Ä–µ–Ω" if action == "approve" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω"
                    await callback.answer(f"–ó–∞–ø—Ä–æ—Å {withdraw_id} {status_text}!")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    original_text = callback.message.text or ""
                    await callback.message.edit_text(
                        text=f"{original_text}\n\n–°—Ç–∞—Ç—É—Å: {status.upper()}",
                        reply_markup=None
                    )
                else:
                    await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

async def check_new_withdraws_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤"""
    while True:
        try:
            withdraws = await fetch_withdraws()
            if withdraws:
                new_withdraws = [
                    w for w in withdraws 
                    if isinstance(w, dict) and w.get("id") not in checked_withdraws
                ]
                
                for withdraw in new_withdraws:
                    await send_withdraw_notification(withdraw)
                    checked_withdraws.add(withdraw["id"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–≤–æ–¥–æ–≤: {e}")
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.send_message(ADMIN_ID, "üü¢ –ë–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    asyncio.create_task(check_new_withdraws_periodically())

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.send_message(ADMIN_ID, "üî¥ –ë–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –£–¥–∞–ª—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")